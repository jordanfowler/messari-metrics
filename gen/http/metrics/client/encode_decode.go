// Code generated by goa v3.2.6, DO NOT EDIT.
//
// metrics HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jordanfowler/messari-metrics/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	metrics "github.com/jordanfowler/messari-metrics/gen/metrics"
	goahttp "goa.design/goa/v3/http"
)

// BuildAssetRequest instantiates a HTTP request object with method and path
// set to call the "metrics" service "asset" endpoint
func (c *Client) BuildAssetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		slug string
	)
	{
		p, ok := v.(*metrics.AssetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("metrics", "asset", "*metrics.AssetPayload", v)
		}
		if p.Slug != nil {
			slug = *p.Slug
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AssetMetricsPath(slug)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("metrics", "asset", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAssetResponse returns a decoder for responses returned by the metrics
// asset endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAssetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AssetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "asset", err)
			}
			res := NewAssetResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("metrics", "asset", resp.StatusCode, string(body))
		}
	}
}

// BuildAggregateRequest instantiates a HTTP request object with method and
// path set to call the "metrics" service "aggregate" endpoint
func (c *Client) BuildAggregateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AggregateMetricsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("metrics", "aggregate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAggregateRequest returns an encoder for requests sent to the metrics
// aggregate server.
func EncodeAggregateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*metrics.AggregatePayload)
		if !ok {
			return goahttp.ErrInvalidType("metrics", "aggregate", "*metrics.AggregatePayload", v)
		}
		values := req.URL.Query()
		if p.Tags != nil {
			values.Add("tags", *p.Tags)
		}
		if p.Sector != nil {
			values.Add("sector", *p.Sector)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAggregateResponse returns a decoder for responses returned by the
// metrics aggregate endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAggregateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AggregateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("metrics", "aggregate", err)
			}
			res := NewAggregateResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("metrics", "aggregate", resp.StatusCode, string(body))
		}
	}
}
