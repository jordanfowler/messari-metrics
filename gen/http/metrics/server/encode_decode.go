// Code generated by goa v3.2.6, DO NOT EDIT.
//
// metrics HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/jordanfowler/messari-metrics/design

package server

import (
	"context"
	"net/http"

	metrics "github.com/jordanfowler/messari-metrics/gen/metrics"
	goahttp "goa.design/goa/v3/http"
)

// EncodeAssetResponse returns an encoder for responses returned by the metrics
// asset endpoint.
func EncodeAssetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*metrics.AssetResult)
		enc := encoder(ctx, w)
		body := NewAssetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAssetRequest returns a decoder for requests sent to the metrics asset
// endpoint.
func DecodeAssetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			slug string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		payload := NewAssetPayload(slug)

		return payload, nil
	}
}

// EncodeAggregateResponse returns an encoder for responses returned by the
// metrics aggregate endpoint.
func EncodeAggregateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*metrics.AggregateResult)
		enc := encoder(ctx, w)
		body := NewAggregateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAggregateRequest returns a decoder for requests sent to the metrics
// aggregate endpoint.
func DecodeAggregateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag    *string
			sector *string
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		sectorRaw := r.URL.Query().Get("sector")
		if sectorRaw != "" {
			sector = &sectorRaw
		}
		payload := NewAggregatePayload(tag, sector)

		return payload, nil
	}
}

// marshalMetricsAssetMetricsToAssetMetrics builds a value of type
// *AssetMetrics from a value of type *metrics.AssetMetrics.
func marshalMetricsAssetMetricsToAssetMetrics(v *metrics.AssetMetrics) *AssetMetrics {
	res := &AssetMetrics{
		AssetSlug: v.AssetSlug,
		Price:     v.Price,
		Vlm24hr:   v.Vlm24hr,
		Chg24hr:   v.Chg24hr,
		Mktcap:    v.Mktcap,
	}

	return res
}
