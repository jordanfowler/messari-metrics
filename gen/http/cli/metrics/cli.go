// Code generated by goa v3.2.6, DO NOT EDIT.
//
// metrics HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jordanfowler/messari-metrics/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	metricsc "github.com/jordanfowler/messari-metrics/gen/http/metrics/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `metrics (asset|aggregate)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` metrics asset --slug "Asperiores sunt a."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		metricsFlags = flag.NewFlagSet("metrics", flag.ContinueOnError)

		metricsAssetFlags    = flag.NewFlagSet("asset", flag.ExitOnError)
		metricsAssetSlugFlag = metricsAssetFlags.String("slug", "REQUIRED", "")

		metricsAggregateFlags      = flag.NewFlagSet("aggregate", flag.ExitOnError)
		metricsAggregateTagFlag    = metricsAggregateFlags.String("tag", "", "")
		metricsAggregateSectorFlag = metricsAggregateFlags.String("sector", "", "")
	)
	metricsFlags.Usage = metricsUsage
	metricsAssetFlags.Usage = metricsAssetUsage
	metricsAggregateFlags.Usage = metricsAggregateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "metrics":
			svcf = metricsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "metrics":
			switch epn {
			case "asset":
				epf = metricsAssetFlags

			case "aggregate":
				epf = metricsAggregateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "metrics":
			c := metricsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "asset":
				endpoint = c.Asset()
				data, err = metricsc.BuildAssetPayload(*metricsAssetSlugFlag)
			case "aggregate":
				endpoint = c.Aggregate()
				data, err = metricsc.BuildAggregatePayload(*metricsAggregateTagFlag, *metricsAggregateSectorFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// metricsUsage displays the usage of the metrics command and its subcommands.
func metricsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the metrics service interface.
Usage:
    %s [globalflags] metrics COMMAND [flags]

COMMAND:
    asset: Asset implements asset.
    aggregate: Aggregate implements aggregate.

Additional help:
    %s metrics COMMAND --help
`, os.Args[0], os.Args[0])
}
func metricsAssetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] metrics asset -slug STRING

Asset implements asset.
    -slug STRING: 

Example:
    `+os.Args[0]+` metrics asset --slug "Asperiores sunt a."
`, os.Args[0])
}

func metricsAggregateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] metrics aggregate -tag STRING -sector STRING

Aggregate implements aggregate.
    -tag STRING: 
    -sector STRING: 

Example:
    `+os.Args[0]+` metrics aggregate --tag "Voluptas ut ea." --sector "Distinctio doloribus ab a occaecati."
`, os.Args[0])
}
