// Code generated by goa v3.2.6, DO NOT EDIT.
//
// metrics service
//
// Command:
// $ goa gen github.com/jordanfowler/messari-metrics/design

package metrics

import (
	"context"
)

// Service is the metrics service interface.
type Service interface {
	// Asset implements asset.
	Asset(context.Context, *AssetPayload) (res *AssetResult, err error)
	// Aggregate implements aggregate.
	Aggregate(context.Context, *AggregatePayload) (res *AggregateResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "metrics"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"asset", "aggregate"}

// AssetPayload is the payload type of the metrics service asset method.
type AssetPayload struct {
	Slug *string
}

// AssetResult is the result type of the metrics service asset method.
type AssetResult struct {
	Metrics *AssetMetrics
}

// AggregatePayload is the payload type of the metrics service aggregate method.
type AggregatePayload struct {
	Tag    *string
	Sector *string
}

// AggregateResult is the result type of the metrics service aggregate method.
type AggregateResult struct {
	Metrics *AggregateMetrics
}

type AssetMetrics struct {
	// Asset slug
	AssetSlug *string
	// Current spot price in USD
	Price *float64
	// Volume traded over last 24 hours
	Vlm24hr *float64
	// Change in price over last 24 hours
	Chg24hr *float64
	// Market cap of asset
	Mktcap *float64
}

type AggregateMetrics struct {
	// Aggregation name, e.g. tag, sector, etc.
	AggName *string
	// Aggregation value, e.g. DeFi, FinTech, etc.
	AggValue *string
	// Current spot price in USD
	Price *float64
	// Volume traded over last 24 hours
	Vlm24hr *float64
	// Change in price over last 24 hours
	Chg24hr *float64
	// Market cap of asset
	Mktcap *float64
}
