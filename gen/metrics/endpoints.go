// Code generated by goa v3.2.6, DO NOT EDIT.
//
// metrics endpoints
//
// Command:
// $ goa gen github.com/jordanfowler/messari-metrics/design

package metrics

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "metrics" service endpoints.
type Endpoints struct {
	Asset     goa.Endpoint
	Aggregate goa.Endpoint
}

// NewEndpoints wraps the methods of the "metrics" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Asset:     NewAssetEndpoint(s),
		Aggregate: NewAggregateEndpoint(s),
	}
}

// Use applies the given middleware to all the "metrics" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Asset = m(e.Asset)
	e.Aggregate = m(e.Aggregate)
}

// NewAssetEndpoint returns an endpoint function that calls the method "asset"
// of service "metrics".
func NewAssetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AssetPayload)
		return s.Asset(ctx, p)
	}
}

// NewAggregateEndpoint returns an endpoint function that calls the method
// "aggregate" of service "metrics".
func NewAggregateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AggregatePayload)
		return s.Aggregate(ctx, p)
	}
}
